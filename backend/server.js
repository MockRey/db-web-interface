require('dotenv').config();

const express = require('express');
const cors = require('cors');
const { Pool } = require('pg');

const app = express();
const port = process.env.PORT || 3000;

app.use(cors()); // –†–∞–∑—Ä–µ—à–∞–µ–º CORS –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(express.json()); // –ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–µ—Ä–≤–µ—Ä—É —Ä–∞–±–æ—Ç–∞—Ç—å —Å JSON-–∑–∞–ø—Ä–æ—Å–∞–º–∏

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ PostgreSQL
const pool = new Pool({
    host: process.env.DB_HOST,
    port: process.env.DB_PORT,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
pool.connect()
    .then(() => console.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!'))
    .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err));

console.log('Database Config:');
console.log('Host:', process.env.DB_HOST);
console.log('Port:', process.env.DB_PORT);
console.log('User:', process.env.DB_USER);
console.log('Database:', process.env.DB_NAME);

// –ë–∞–∑–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã API
app.get('/', (req, res) => {
    res.send('API —Ä–∞–±–æ—Ç–∞–µ—Ç! üöÄ');
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(port, () => {
    console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${port}`);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
app.post('/query', async (req, res) => {
    try {
        const { sql } = req.body; // –ü–æ–ª—É—á–∞–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∏–∑ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
        if (!sql) {
            return res.status(400).json({ error: 'SQL-–∑–∞–ø—Ä–æ—Å –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
        }

        // –ó–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        const forbiddenCommands = ['DELETE', 'DROP', 'ALTER', 'TRUNCATE', 'UPDATE', 'INSERT'];
        const normalizedSQL = sql.trim().toUpperCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –∫ –≤–µ—Ä—Ö–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if (forbiddenCommands.some(cmd => normalizedSQL.startsWith(cmd))) {
            return res.status(403).json({ error: '–ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É!' });
        }

        // –í—ã–ø–æ–ª–Ω—è–µ–º SQL-–∑–∞–ø—Ä–æ—Å –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç 100 —Å—Ç—Ä–æ–∫–∞–º–∏
        const result = await pool.query(sql + ' LIMIT 100');

        res.json({ data: result.rows });
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL-–∑–∞–ø—Ä–æ—Å–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
app.get('/templates', async (req, res) => {
    try {
        const result = await pool.query('SELECT * FROM sql_templates');
        res.json({ templates: result.rows });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–æ–≤' });
    }
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ –∑–∞–ø—Ä–æ—Å–∞
app.post('/templates', async (req, res) => {
    const { name, sql } = req.body;
    
    if (!name || !sql) {
        return res.status(400).json({ error: '–ò–º—è —à–∞–±–ª–æ–Ω–∞ –∏ SQL-–∑–∞–ø—Ä–æ—Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã!' });
    }

    try {
        const result = await pool.query('INSERT INTO sql_templates (name, sql) VALUES ($1, $2) RETURNING *', [name, sql]);
        res.status(201).json({ template: result.rows[0] });
    } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —à–∞–±–ª–æ–Ω–∞:', err);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞' });
    }
});
